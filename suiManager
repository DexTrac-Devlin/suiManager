#!/bin/bash
# This script is intended to manage and maintain
# your Mysten Sui node.

#                    .@@,
#                   %@@@@@
#                 ,@@@@@@@@(
#                @@@@&  .@@@@,
#               @@@@.     @@@@.
#             #@@@@        (@@@@                                                          ,@(.
#            @@@@@          .@@@@/                                                       *@@@@
#          .@@@@@.            @@@@%
#         @@@@@@@.             .@@@@.                   .
#       .@@@@.@@@@.              (@@@&          .&@@@@@@@@@@*     %@@@          ,@@@      @@@*
#      (@@@@   &@@@&              (@@@@.        @@@.      (@&.    %@@@          ,@@@      @@@*
#    .@@@@*     *@@@@@&.            @@@@/       @@@.              %@@@          ,@@@      @@@*
#    @@@@          ,@@@@@@@@,        @@@@/      .@@@@@@@.*        %@@@          ,@@@      @@@*
#   @@@@*               (@@@@@@@.     @@@@           *((@@@@@.    %@@@          ,@@@.     @@@*
#   &@@@                    .@@@@@/   *@@@*               .@@@.   %@@&          .@@@.     @@@*
#   @@@@                       .@@@@. @@@@*   .@@@@       (@@@,    @@@@,      ,@@@@@.     @@@*
#   .@@@(                        @@@@.@@@@      ,@@@@@@@@@@@(       ,@@@@@@@@@@#,@@@.     @@@*
#    *@@@/                        @@@@@@@
#     *@@@@.                      @@@@@&.
#       (@@@@%.                 ,@@@@@.
#         #@@@@@@//        ./&@@@@@%.
#            .#@@@@@@@@@@@@@@@@@*
#                   .......

#===============================================#
#              FORMATTING VARIABLES             #
#===============================================#
# bold
b=$(tput bold)
# blue foreground
blue_fg=$(tput setaf 6)
# yello foreground
yellow_fg=$(tput setaf 3)
# reset to default
reset=$(tput sgr0)

#===============================================#
#                   VARIABLES                   #
#===============================================#
WORKING_DIR=$(pwd)

#===============================================#
#                  DEPLOY NODE                  #
#===============================================#
Deploy_node() {

if [ "$EUID" -ne 0 ]
  then echo "${b} Run as elevated user (sudo)${n}"
  exit
fi

echo "${b}Please enter your username.${reset}"
read USERNAME

echo "${b}Installing dependencies.${reset}"
apt install tzdata git ca-certificates curl build-essential libssl-dev pkg-config libclang-dev cmake


echo "${b}Installing Rust and Cargo.${reset}"
apt install -y curl git wget
runuser -u $USERNAME -- curl https://sh.rustup.rs -sSf | runuser -u $USERNAME -- sh

sed -i 's|$HOME|/home/$USERNAME|g' /home/$USERNAME/.cargo/env
sed -i 's|PATH="$HOME/.local/bin:$PATH"|PATH="/home/$USERNAME/.local/bin:$PATH"|g' /home/$USERNAME/.profile
sed -i "s|\$HOME/.cargo/env|/home/$USERNAME/.cargo/env|g" /home/$USERNAME/.profile
sed -i 's|"$HOME/.cargo/env"|"/home/$USERNAME/.cargo/env"|g' /home/$USERNAME/.bashrc
source /home/$USERNAME/.cargo/env
source /home/$USERNAME/.profile
source /home/$USERNAME/.bashrc


echo "    Installed cargo version:"
cargo --version

echo ""
echo ""
cd /home/$USERNAME/
echo "${b}Creating directories.${reset}"
echo "    Location: /home/$USERNAME/suiData"
echo "    Location: /home/$USERNAME/suiData/genesisFiles"
echo "    Location: /home/$USERNAME/suiData/suidb"
mkdir -p /home/$USERNAME/suiData/genesisFiles
mkdir /home/$USERNAME/suiData/suidb && chown -R $USERNAME: /home/$USERNAME/suiData

echo ""
echo "${b}Cloning repository.${reset}"
echo "    Location: /home/$USERNAME/sui"
git clone --quiet https://github.com/MystenLabs/sui.git
chown -R $USERNAME: /home/$USERNAME/sui
cd /home/$USERNAME/sui
git remote add upstream https://github.com/MystenLabs/sui
git fetch upstream
git checkout -B devnet --track upstream/devnet

echo ""
echo "${b}Compiling binary.${reset}"
chown -R $USERNAME: /home/$USERNAME/sui/Cargo.lock
sudo -u $USERNAME bash -c '/home/$USER/.cargo/bin/cargo build --verbose --release -p sui-node'

echo ""
echo "${b}Creating Configuration File.${reset}"
echo "    Location: /home/$USERNAME/suiData/fullnode.yaml."
touch /home/$USERNAME/suiData/fullnode.yaml
cat << EOF >> /home/$USERNAME/suiData/fullnode.yaml
# Update this value to the location you want Sui to store its database
db-path: "/home/$USERNAME/suiData/suidb"

# 0.0.0.0 Sets the service to listen on any address.
network-address: "/dns/localhost/tcp/8080/http"
metrics-address: "0.0.0.0:9184"
json-rpc-address: "0.0.0.0:9000"

genesis:
  # Update this to the location of where the genesis file is stored
  genesis-file-location: "/home/$USERNAME/suiData/genesisFiles/genesis.blob"
EOF

echo ""
echo "${b}Downloading Genesis File.${reset}"
echo "    Location: /home/$USERNAME/suiData/genesisFiles/genesis.blob"

wget -O /home/$USERNAME/suiData/genesisFiles/genesis.blob https://github.com/MystenLabs/sui-genesis/raw/main/devnet/genesis.blob

echo ""
echo "${b}Creating systemd service.${reset}"
echo "    Location: /etc/systemd/system/suid.service"
sudo touch /etc/systemd/system/suid.service
sudo cat << EOF >> /etc/systemd/system/suid.service
[Unit]
Description=Mysten Sui Node
After=network.target auditd.service
Wants=network.target

[Service]
Type=simple
User=$USERNAME
WorkingDirectory=/home/$USERNAME/sui/
TimeoutStartSec=0
TimeoutStopSec=120
ExecStart=/home/$USERNAME/sui/target/release/sui-node --config-path /home/$USERNAME/suiData/fullnode.yaml
Restart=always
RestartSec=20s

[Install]
WantedBy=multi-user.target
RequiredBy=swarm.service
Alias=suid.service
EOF


echo ""
echo "${b}Enabling and starting suid.service.${reset}"
sudo systemctl enable /etc/systemd/system/suid.service
sudo systemctl start /etc/systemd/system/suid.service

echo ""
echo "${b}Press Ctrl + c to exit logs."
echo "    We want to see ${blue_fg}SuiNode started!${reset}"
echo ""
sudo journalctl -f -u suid.service
}

#===============================================#
#                UPGRADE NODE                   #
#===============================================#
Upgrade_node() {

if [ "$EUID" -ne 0 ]
  then echo "${b} Run as elevated user (sudo)${n}"
  exit
fi

echo "${b}Please enter your username.${reset}"
read USERNAME

echo "${b}Upgrading Mysten Sui node."
echo "    Stopping suid.service."
sudo systemctl stop suid.service

echo ""
echo "    Removing old files."
sudo rm -rf /home/$USERNAME/suiData/suidb/*
sudo rm /home/$USERNAME/suiData/genesisFiles/genesis.blob
sudo rm -rf /home/$USERNAME/sui
source /home/$USERNAME/.cargo/env
cd /home/$USERNAME/

echo ""
echo "    Cloning repository."
git clone --quiet https://github.com/MystenLabs/sui.git
chown -R $USERNAME: /home/$USERNAME/sui
cd /home/$USERNAME/sui
git remote add upstream https://github.com/MystenLabs/sui
git fetch upstream
git checkout -B devnet --track upstream/devnet

echo ""
echo "${b}Compiling binary.${reset}"
chown -R $USERNAME: /home/$USERNAME/sui/Cargo.lock
sudo -u $USERNAME bash -c '/home/$USER/.cargo/bin/cargo build --verbose --release -p sui-node'

echo ""
echo "    Downloading new genesis.blob."
mkdir -p /home/$USERNAME/suiData/genesisFiles
mkdir /home/$USERNAME/suiData/suidb && chown -R $USERNAME: /home/$USERNAME/suiData
wget -O /home/$USERNAME/suiData/genesisFiles/genesis.blob https://github.com/MystenLabs/sui-genesis/raw/main/devnet/genesis.blob

echo ""
echo "    Starting suid.service"
sudo systemctl start suid.service

echo "=================="
echo "${b}Press Ctrl + c to exit logs."
echo "    We want to see ${blue_fg}SuiNode started!${reset}"
echo ""
sudo journalctl -f -u suid.service
}

#===============================================#
#                     HELP                      #
#===============================================#
Help() {
  # Display Help
  echo "This script helps you deploy and upgrade your Mysten Sui node."
  echo
  echo "Usage:  ${b}suiManager option${reset}"
  echo ""
  echo "options:"
  echo ""
  echo "-d        Deploys new Mysten Sui node."
  echo "${b}            ex: suiManager -d${reset}"
  echo ""
  echo "-u        Upgrades existing Mysten Sui node."
  echo "${b}            ex: suiManager -u${reset}"
  echo ""
  echo "-h        Print this Help function and exit."
  echo ""
}

#===============================================#
#                     MAIN                      #
#===============================================#
while getopts ":duh" option; do
   case ${option} in
      d) # deploy new Mysten Sui node
         Deploy_node
         exit
         ;;
      u) # upgrade existing Mysten Sui node
         Upgrade_node
         exit
         ;;
      h) # Display Help
         Help
         exit
         ;;
      \?) # Invalid Option
         echo "Invalid option: $OPTARG" 1>&2
         exit 1
         ;;
      :) # Invalid Option
         echo "Invalid option: $OPTARG requires an argument" 1>&2
         exit 1
         ;;
   esac
done
